class:: Volume
summary:: Model for the global volume of the synthesis server
categories:: Server
related:: Classes/Server

description::
Internally used by Server. When volume value != 0 dB, muted or the limiter is active, a server's volume object will create a synth for controlling the volume on the main outputs for the number of channels given.

note::
If initiated by link::Classes/Server:: a link::Classes/Clip:: will be active, which by default clamps any output samples to code::-1.0:: and code::1.0::.
Because link::Classes/Clip:: is quite harsh in clipping you can deactivate this by calling e.g. code::Server.default.unlimit::
::

classmethods::
method:: new
Create and return a new instance of Volume for a given server,
ranging from code::startBus:: over code::numChans:: (usually the server's number of output bus channels).
argument:: server
a server
argument:: startBus
start bus
argument:: numChannels
number of channels
argument:: min
minimum volume in decibel
argument:: max
minimum volume in decibel
argument:: persist
whether to persist a reset
argument:: limit
if set above 0.0 it will clip any samples via link::Classes/Clip:: to code::-aLimit:: and code::aLimit::.

instancemethods::

method:: mute
mute output

method:: unmute
unmute output

method:: volume
set the volume (in db)

method:: lag
set the lag time that dampens volume changes

method:: limit
limits the output via link::Classes/Clip:: - can be set to a floating value, default is 1.0

method:: unlimit
removes the limiter from output (equal to code::limit(0.0)::)

method:: setVolumeRange
set the volume range

method:: gui
create a volume gui.

examples::
code::
v = s.volume;

v.min;
v.max;
v.volume = rrand(-50, 5);
v.setVolumeRange(-90, 8);
v.mute;
v.unmute;
v.unlimit;
v.limit;

// separate window
v.gui;
::

